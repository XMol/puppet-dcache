# This is the dcache.conf file for the dCache instance
#     ppssrm-kit.gridka.de.
# Most currently known configurable settings are present here.
# However, they do not necessarily differ from their default
# values. For getting to know their meaning, consult the
# respective property files under
#     /usr/share/dcache/defaults.

# Remember to include the gridka.properties file as a plugin!

#
# -- admin.properties --
#
# admin.cell.name = admin
# admin.cell.subscribe = ${admin.loginbroker.update-topic}
# admin.prompt = ${host.name}
# admin.net.port = 22224
# admin.net.listen = ${dcache.net.listen}
# admin.authz.gid = 0
# admin.paths.history =
# (one-of?true|false)admin.enable.colors = true
# admin.paths.authorized-keys = ${dcache.paths.admin}/authorized_keys2
# admin.paths.dsa-host-key.private = ${dcache.paths.admin}/ssh_host_dsa_key
# admin.paths.dsa-host-key.public = ${dcache.paths.admin}/ssh_host_dsa_key.pub
# admin.service.gplazma=${dcache.service.gplazma}
# admin.service.gplazma.timeout=30000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)admin.service.gplazma.timeout.unit=MILLISECONDS
# admin.service.poolmanager=${dcache.service.poolmanager}
# admin.service.poolmanager.timeout=30000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)admin.service.poolmanager.timeout.unit=MILLISECONDS
# admin.service.spacemanager=${dcache.service.spacemanager}
# admin.service.spacemanager.timeout=30000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)admin.service.spacemanager.timeout.unit=MILLISECONDS
# admin.service.pnfsmanager=${dcache.service.pnfsmanager}
# admin.service.pnfsmanager.timeout=30000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)admin.service.pnfsmanager.timeout.unit=MILLISECONDS
# admin.loginbroker.update-topic = ${dcache.loginbroker.update-topic}
# admin.loginbroker.request-topic = ${dcache.loginbroker.request-topic}
# admin.service.acm=${dcache.service.acm}
# admin.service.acm.timeout=30000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)admin.service.acm.timeout.unit=MILLISECONDS
# admin.ssh.idle-timeout = infinity
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)admin.ssh.idle-timeout.unit=MINUTES


#
# -- alarms.properties --
#
# alarms.cell.name=alarms
# alarms.net.host=${dcache.log.server.host}
# alarms.net.port=${dcache.log.server.port}
# alarms.dir=/var/lib/dcache/alarms
# (one-of?off|error|warn|info|debug)alarms.log.root-level=warn
# (deprecated)alarms.definitions.path=${alarms.dir}/alarms-custom-definitions.xml
# alarms.custom-definitions.path=${alarms.definitions.path}
# alarms.priority-mapping.path=${alarms.dir}/alarms-priority.properties
# (one-of?critical|high|moderate|low)alarms.priority-mapping.default=critical
# alarms.limits.workers=1
# (one-of?true|false)alarms.enable.email=false
# alarms.email.smtp-host=
# alarms.email.smtp-port=25
# alarms.email.start-tls=false
# alarms.email.ssl=false
# alarms.email.user=
# alarms.email.password=
# alarms.email.to=
# alarms.email.from=
# alarms.email.subject=dCache Alarm
# alarms.email.buffer-size=1
# (one-of?critical|high|medium|low)alarms.email.threshold=critical
# alarms.email.encoding-pattern=%d{dd MMM yyyy HH:mm:ss} %marker \\(%X{host}\\)\\(%X{service}\\)\\(%X{domain}\\) %m%n
# (one-of?critical|high|medium|low)alarms.history.threshold=critical
# alarms.history.encoding-pattern=%d{dd MMM yyyy HH:mm:ss} %marker \\(%X{host}\\)\\(%X{service}\\)\\(%X{domain}\\) %m%n
# alarms.history.log-path=${alarms.dir}/history.log
# alarms.history.log-file.pattern=history.%i.log
# alarms.history.max-file-size=8MB
# alarms.history.min-index=1
# alarms.history.max-index=3
# (one-of?off|xml|rdbms)alarms.db.type=off
# (one-of?true|false)alarms.db.alarms-only=false
# alarms.db.xml.path = ${alarms.dir}/store.xml
# alarms.db.rdbms.type = postgresql
# alarms.db.host = ${dcache.db.host}
# alarms.db.user = ${dcache.db.user}
# alarms.db.password = ${dcache.db.password}
# alarms.db.name=${alarms.db.name-when-type-is-${alarms.db.type}}
# (one-of?true|false|${alarms.enable.history-when-type-is-${alarms.db.type}})alarms.enable.history=${alarms.enable.history-when-type-is-${alarms.db.type}}
# alarms.db.url=${alarms.db.url-when-type-is-${alarms.db.type}}
# (one-of?true|false)alarms.enable.cleaner = false
# alarms.cleaner.timeout = 7
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)alarms.cleaner.timeout.unit = DAYS
# alarms.cleaner.delete-entries-before = 14
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)alarms.cleaner.delete-entries-before.unit = DAYS
# alarms.db.schema.auto=${dcache.db.schema.auto}
# alarms.db.schema.changelog=${alarms.db.changelog-when-type-is-${alarms.db.type}}


#
# -- billing.properties --
#
# billing.cell.name=billing
# (one-of?true|false)billing.cell.export=true
# (one-of?true|false)billing.enable.text = true
# billing.text.dir = ${dcache.paths.billing}
# (one-of?true|false)billing.text.flat-dir=false
# billing.text.format.mover-info-message = $date$ [$cellType$:$cellName$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ $transferred$ $connectionTime$ $created$ {$protocol$} [$initiator$] {$rc$:"$message$"}
# billing.text.format.remove-file-info-message = $date$ [$cellType$:$cellName$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ {$rc$:"$message$"}
# billing.text.format.door-request-info-message = $date$ [$cellType$:$cellName$:$type$] ["$owner$":$uid$:$gid$:$client$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ $transactionTime$ $queuingTime$ {$rc$:"$message$"}
# billing.text.format.storage-info-message = $date$ [$cellType$:$cellName$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ $transferTime$ $queuingTime$ {$rc$:"$message$"}
# billing.text.format.pool-hit-info-message = $date$ [$cellType$:$cellName$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ $cached$ {$protocol$} {$rc$:"$message$"}
# (one-of?true|false)billing.enable.db = false
# billing.db.inserts.max-before-commit = 10000
# billing.db.inserts.timeout-before-commit = 5
# (one-of?MILLISECONDS|SECONDS|MINUTES)billing.db.inserts.timeout-before-commit.unit = SECONDS
# (one-of?org.dcache.services.billing.db.impl.DirectQueueDelegate)billing.db.inserts.queue-delegate.type=org.dcache.services.billing.db.impl.DirectQueueDelegate
# billing.db.inserts.max-queue-size=100000
# billing.db.inserts.max-batch-size=1000
# (one-of?true|false)billing.db.inserts.drop-messages-at-limit=true
# (one-of?true|false|${dcache.db.schema.auto})billing.db.schema.auto = ${dcache.db.schema.auto}
# billing.db.url = jdbc:postgresql://${billing.db.host}/${billing.db.name}
# billing.db.host = ${dcache.db.host}
# billing.db.user = ${dcache.db.user}
# billing.db.password = ${dcache.db.password}
# billing.db.password.file = ${dcache.db.password.file}
# billing.db.name=${billing.db.name-when-${billing.enable.db}}
# billing.db.connections.max=30
# billing.db.connections.idle=3
# billing.db.schema.changelog=${billing.db.schema.changelog-when-${billing.enable.db}}
# billing.service.poolmanager.timeout = 3600000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)billing.service.poolmanager.timeout.unit=MILLISECONDS
# billing.service.poolmanager=${dcache.service.poolmanager}


#
# -- chimera.properties --
#
# chimera.db.name = chimera
# chimera.db.host = ${dcache.db.host}
chimera.db.host=${dcache.hosts.database.chimera}
# chimera.db.url = jdbc:postgresql://${chimera.db.host}/${chimera.db.name}?prepareThreshold=3
# chimera.db.user = ${dcache.db.user}
chimera.db.user=chimera
# chimera.db.password = ${dcache.db.password}
# chimera.db.password.file = ${dcache.db.password.file}
# (one-of?PgSQL|HsqlDB|H2)chimera.db.dialect = PgSQL
# chimera.db.jar = ${chimera.db.jar-when-${chimera.db.dialect}}
# chimera.db.jar-when-PgSQL = postgresql
# chimera.db.jar-when-HsqlDB = hsqldb
# chimera.db.jar-when-H2 = h2
# chimera.db.schema.changelog = org/dcache/chimera/changelog/changelog-master.xml


#
# -- cleaner.properties --
#
# cleaner.cell.name=cleaner
# (one-of?true|false)cleaner.cell.export=true
# cleaner.cell.subscribe=PoolUpTopic,broadcast
# (one-of?true|false|${dcache.enable.space-reservation})cleaner.enable.space-reservation=${dcache.enable.space-reservation}
# (one-of?true|false|${dcache.enable.replica})cleaner.enable.replica=${dcache.enable.replica}
# cleaner.limits.threads = 5
# cleaner.limits.period = 120
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)cleaner.limits.period.unit = SECONDS
# cleaner.service.pool.timeout = 100
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)cleaner.service.pool.timeout.unit = SECONDS
# cleaner.service.pool.retry-period = 1800
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)cleaner.service.pool.retry-period.unit = SECONDS
# cleaner.service.spacemanager=${dcache.service.spacemanager}
# cleaner.service.replica=${dcache.service.replica}
# cleaner.service.pinmanager=${dcache.service.pinmanager}
# cleaner.destination.remove-notification = ${cleaner.destination.remove-notification.when-${cleaner.enable.space-reservation}-${cleaner.enable.replica}}
# cleaner.limits.batch-size = 500
# (one-of?true|false)cleaner.enable.hsm = true
cleaner.enable.hsm=false
# cleaner.limits.hsm-batch-size = 100
# cleaner.service.pool.hsm-timeout = 120
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)cleaner.service.pool.hsm-timeout.unit = SECONDS
# cleaner.db.schema.auto=false


#
# -- dcache.properties --
#
# (not-for-services)dcache.user=dcache
# (one-of?chimera)dcache.namespace=chimera
# (not-for-services)dcache.layout=${host.name}
# (not-for-services)dcache.layout.dir=${dcache.paths.etc}/layouts
# (not-for-services)dcache.layout.uri=file:${dcache.layout.dir}/${dcache.layout}.conf
# (not-for-services)dcache.pid.dir=/var/run
# (not-for-services)dcache.pid.java=${dcache.pid.dir}/dcache.${dcache.domain.name}-java.pid
# (not-for-services)dcache.pid.daemon=${dcache.pid.dir}/dcache.${dcache.domain.name}-daemon.pid
# (not-for-services)dcache.log.dir=/var/log/dcache
# (not-for-services)dcache.log.file=${dcache.log.dir}/${dcache.domain.name}.log
# (not-for-services,one-of?new|keep)dcache.log.mode=keep
# (not-for-services)dcache.log.configuration=file:${dcache.paths.etc}/logback.xml
# (not-for-services,one-of?off|error|warn|info|debug|trace|all)dcache.log.level.file=warn
# (not-for-services,one-of?off|error|warn|info|debug|trace|all)dcache.log.level.pinboard=info
# (not-for-services,one-of?off|error|warn|info|debug|trace|all)dcache.log.level.remote=off
# (not-for-services,one-of?off|error|warn|info|debug|trace|all)dcache.log.level.events=off
# (not-for-services,one-of?off|error|warn|info|debug|trace|all)dcache.log.level.access=info
# dcache.log.access.max-history=30
# (not-for-services)dcache.log.server.host=localhost
# (not-for-services)dcache.log.server.port=9867
# (not-for-services)dcache.log.format.file=%d{dd MMM yyyy HH:mm:ss} \\(%X{cells.cell}\\) [%X{org.dcache.ndc}] %m%n
# (not-for-services)dcache.log.format.pinboard=[%t] [%X{org.dcache.ndc}] %m
# (not-for-services)dcache.restart.delay=10
# (not-for-services)dcache.restart.dir=/tmp
# (not-for-services)dcache.restart.file=${dcache.restart.dir}/.dcache-stop.${dcache.domain.name}
# (not-for-services)dcache.java.memory.heap=512m
# (not-for-services)dcache.java.memory.direct=512m
# (not-for-services)dcache.java.oom.location=${dcache.log.dir}
# (not-for-services)dcache.java.oom.file=${dcache.java.oom.location}/${dcache.domain.name}-oom.hprof
# (not-for-services)dcache.java.classpath=
# (not-for-services)dcache.java.library.path=${dcache.paths.lib}
# (not-for-services)dcache.java.options.extra=
# (not-for-services)dcache.java.options.short-lived.extra=
# (not-for-services)dcache.java.options=\
#     -server \
#     -Xmx${dcache.java.memory.heap} \
#     -XX:MaxDirectMemorySize=${dcache.java.memory.direct} \
#     -Dsun.net.inetaddr.ttl=${dcache.net.inetaddr.lifetime} \
#     -Dorg.globus.tcp.port.range=${dcache.net.wan.port.min},${dcache.net.wan.port.max} \
#     -Dorg.dcache.dcap.port=${pool.mover.dcap.port} \
#     -Dorg.dcache.net.tcp.portrange=${dcache.net.lan.port.min}:${dcache.net.lan.port.max} \
#     -Dorg.globus.jglobus.delegation.cache.lifetime=${dcache.authn.gsi.delegation.cache.lifetime} \
#     -Dorg.globus.jglobus.crl.cache.lifetime=${dcache.authn.gsi.crl.cache.lifetime} \
#     -Djava.security.krb5.realm=${dcache.authn.kerberos.realm} \
#     -Djava.security.krb5.kdc=${dcache.authn.kerberos.key-distribution-center-list} \
#     -Djavax.security.auth.useSubjectCredsOnly=false \
#     -Djava.security.auth.login.config=${dcache.authn.jaas.config} \
#     -XX:+HeapDumpOnOutOfMemoryError \
#     -XX:HeapDumpPath=${dcache.java.oom.file} \
#     -javaagent:${dcache.paths.classes}/aspectjweaver-1.8.5.jar \
#     ${dcache.java.options.common} \
#     ${dcache.java.options.extra}
# (not-for-services)dcache.java.options.short-lived=\
#     -client \
#     -XX:+TieredCompilation \
#     -XX:TieredStopAtLevel=1 \
#     ${dcache.java.options.common} \
#     ${dcache.java.options.short-lived.extra}
# (not-for-services)dcache.java.options.common=\
#     -Djava.awt.headless=true \
#     -DwantLog4jSetup=n
# (not-for-services)dcache.config.cache=true
# (not-for-services)dcache.domain.preload = file:${dcache.paths.share}/cells/preload.fragment
# dcache.domain.service.dir = ${dcache.paths.share}/services
# dcache.domain.service.uri.base = file:${dcache.domain.service.dir}/
# dcache.domain.service.uri = ${dcache.domain.service}.batch
# dcache.credential-service.topic = CredentialServiceTopic
# dcache.credential-service.timeout = 20
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
#   dcache.credential-service.timeout.unit = SECONDS
# (not-for-services)dcache.net.wan.port.min = 20000
# (not-for-services)dcache.net.wan.port.max = 25000
# (not-for-services)dcache.net.lan.port.min = 33115
# (not-for-services)dcache.net.lan.port.max = 33145
# (not-for-services)dcache.net.inetaddr.lifetime = 1800
# dcache.net.listen = any
# (not-for-services,one-of?cells|none)\
# dcache.broker.scheme = cells
# (not-for-services)dcache.broker.domain = dCacheDomain
# (not-for-services)dcache.broker.host = localhost
dcache.broker.host=${dcache.hosts.headnode}
# (not-for-services)dcache.broker.port = 11111
# (not-for-services)dcache.broker.messaging.port = ${dcache.broker.port}
# (not-for-services)dcache.broker.client.port = 0
# (not-for-services)dcache.broker.cells.config = ${dcache.paths.etc}/lm.config
# dcache.service.alarms = ${alarms.cell.name}
# dcache.service.acm = acm
# dcache.service.broadcast = ${broadcast.cell.name}
# dcache.service.pnfsmanager = ${pnfsmanager.cell.name}
# dcache.service.poolmanager = ${poolmanager.cell.name}
# dcache.service.billing = ${billing.cell.name}
# dcache.service.gplazma = ${gplazma.cell.name}
# dcache.service.spacemanager = ${spacemanager.cell.name}
# dcache.service.pinmanager = ${pinmanager.cell.name}
# dcache.service.replica = ${replica.cell.name}
# dcache.service.transfermanager = ${transfermanagers.cell.name}
# dcache.service.copymanager = CopyManager
# dcache.service.topo = ${topo.cell.name}
# dcache.loginbroker.update-topic = LoginBrokerTopic
# dcache.loginbroker.request-topic = LoginBrokerRequestTopic
# dcache.loginbroker.tags = glue,srm
# dcache.loginbroker.update-period = 5
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)dcache.loginbroker.update-period.unit = SECONDS
# dcache.loginbroker.update-threshold = 0.1
# (not-for-services)dcache.authn.gsi.delegation.cache.lifetime = 30000
# (not-for-services)dcache.authn.gsi.crl.cache.lifetime =60000
# (not-for-services)dcache.authn.kerberos.realm =
# dcache.authn.kerberos.key-distribution-center-list =
# dcache.authn.jaas.config = ${dcache.paths.etc}/jgss.conf
# dcache.authn.hostcert.key = ${dcache.paths.grid-security}/hostkey.pem
dcache.authn.hostcert.key=${dcache.paths.grid-security}/dcache/hostkey.pem
# dcache.authn.hostcert.cert = ${dcache.paths.grid-security}/hostcert.pem
dcache.authn.hostcert.cert=${dcache.paths.grid-security}/dcache/hostcert.pem
# dcache.authn.hostcert.refresh = 43200
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)dcache.authn.hostcert.refresh.unit = SECONDS
# (one-of?true|false)dcache.authn.hostcert.verify=true
# dcache.authn.capath = ${dcache.paths.grid-security}/certificates
# dcache.authn.capath.refresh = 43200
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)dcache.authn.capath.refresh.unit = SECONDS
# dcache.authn.vomsdir=${dcache.paths.grid-security}/vomsdir
# (any-of?DISABLE_EC|DISABLE_BROKEN_DH|DISABLE_RC4)dcache.authn.ciphers = DISABLE_EC,DISABLE_BROKEN_DH
# (one-of?true|false)dcache.enable.overwrite = true
# (one-of?true|false)dcache.enable.space-reservation=true
# dcache.upload-directory=/upload
# (one-of?true|false)dcache.db.schema.auto=true
# dcache.db.host = localhost
# dcache.db.user = dcache
# dcache.db.password =
# dcache.db.password.file =
# dcache.authz.staging =
# (one-of?doors|PoolManager)dcache.authz.staging.pep = doors
# dcache.description =


#
# -- dcap.properties --
#
# dcap.cell.name=${dcap.cell.name.${dcap.authn.protocol}}
# dcap.cell.name.plain=DCap-${host.name}
# dcap.cell.name.auth=DCap-auth-${host.name}
# dcap.cell.name.gsi=DCap-gsi-${host.name}
# dcap.cell.name.kerberos=DCap-Kerberos-${host.name}
# dcap.cell.name.dir=dirLookupPool
# (one-of?true|false)dcap.cell.export=true
# dcap.cell.subscribe=${dcache.loginbroker.request-topic}
# (one-of?plain|auth|kerberos|gsi)dcap.authn.protocol=plain
# dcap.authn.passwd = ${dcache.paths.etc}/passwd4dCapDoor
# dcap.authn.kerberos.service-principle-name=host/${host.fqdn}@${dcache.authn.kerberos.realm}
# dcap.authn.kerberos.key-distribution-center-list=${dcache.authn.kerberos.key-distribution-center-list}
# dcap.authn.hostcert.cert=${dcache.authn.hostcert.cert}
# dcap.authn.hostcert.key=${dcache.authn.hostcert.key}
# dcap.authn.capath=${dcache.authn.capath}
# dcap.authn.vomsdir=${dcache.authn.vomsdir}
# dcap.authn.ciphers =${dcache.authn.ciphers}
# (one-of?true|false)dcap.authz.truncate = false
# (one-of?NONE|READONLY|FULL)dcap.authz.anonymous-operations = NONE
dcap.authz.anonymous-operations=READONLY
# (one-of?true|false)dcap.authz.readonly = false
dcap.authz.readonly=true
# dcap.authz.staging=${dcache.authz.staging}
# (one-of?doors|PoolManager|${dcache.authz.staging.pep})dcap.authz.staging.pep=${dcache.authz.staging.pep}
# (one-of?true|false)dcap.authz.mover-queue-overwrite = false
# dcap.net.port=${dcap.net.port.${dcap.authn.protocol}}
# dcap.net.port.plain=22125
# dcap.net.port.gsi=22128
# dcap.net.port.auth=22129
# dcap.net.port.kerberos=22725
# dcap.net.listen=${dcache.net.listen}
# dcap.mover.queue =
dcap.mover.queue=dcapq
# dcap.limits.clients = 1500
dcap.limits.clients="-1"
# dcap.service.pnfsmanager=${dcache.service.pnfsmanager}
# dcap.service.gplazma=${dcache.service.gplazma}
# dcap.service.billing=${dcache.service.billing}
# dcap.service.spacemanager=${dcache.service.spacemanager}
# dcap.service.pinmanager=${dcache.service.pinmanager}
# dcap.service.poolmanager=${dcap.service.poolmanager-space-${dcap.enable.space-reservation}}
# (one-of?true|false|${dcache.enable.space-reservation})dcap.enable.space-reservation=${dcache.enable.space-reservation}
# dcap.loginbroker.update-topic=${dcache.loginbroker.update-topic}
# dcap.loginbroker.request-topic=${dcache.loginbroker.request-topic}
# dcap.loginbroker.tags=${dcache.loginbroker.tags}
# dcap.loginbroker.update-period=${dcache.loginbroker.update-period}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.loginbroker.update-period.unit})\
#   dcap.loginbroker.update-period.unit=${dcache.loginbroker.update-period.unit}
# dcap.loginbroker.update-threshold=${dcache.loginbroker.update-threshold}
# dcap.loginbroker.family=${dcap.loginbroker.family.${dcap.authn.protocol}}
# dcap.loginbroker.family.plain=dcap
# dcap.loginbroker.family.auth=dcap
# dcap.loginbroker.family.gsi=gsidcap
# dcap.loginbroker.family.kerberos=dcap
# dcap.loginbroker.version=1.3.0


#
# -- ftp.properties --
#
# ftp.cell.name.plain=FTP-${host.name}
# ftp.cell.name.gsi=GFTP-${host.name}
# ftp.cell.name.kerberos=KFTP-${host.name}
# ftp.cell.name=${ftp.cell.name.${ftp.authn.protocol}}
# (one-of?true|false)ftp.cell.export=true
# ftp.cell.subscribe=${ftp.loginbroker.request-topic}
# (one-of?plain|gsi|kerberos)ftp.authn.protocol=plain
# ftp.authn.kerberos.service-principle-name=ftp/${host.fqdn}@${dcache.authn.kerberos.realm}
# ftp.authn.kerberos.key-distribution-center-list=${dcache.authn.kerberos.key-distribution-center-list}
# ftp.authn.hostcert.key=${dcache.authn.hostcert.key}
# ftp.authn.hostcert.cert=${dcache.authn.hostcert.cert}
# ftp.authn.capath=${dcache.authn.capath}
# ftp.authz.staging=${dcache.authz.staging}
# (one-of?doors|PoolManager|${dcache.authz.staging.pep})ftp.authz.staging.pep=${dcache.authz.staging.pep}
# (one-of?true|false|${ftp.authz.readonly.${ftp.authn.protocol}})ftp.authz.readonly=${ftp.authz.readonly.${ftp.authn.protocol}}
# (one-of?true|false)ftp.authz.readonly.plain=true
# (one-of?true|false)ftp.authz.readonly.gsi=false
# (one-of?true|false)ftp.authz.readonly.kerberos=false
# ftp.authz.upload-directory=${dcache.upload-directory}
# ftp.root=
# ftp.net.port=${ftp.net.port.${ftp.authn.protocol}}
# ftp.net.port.plain = 22126
# ftp.net.port.kerberos = 22127
# ftp.net.port.gsi = 2811
# ftp.net.listen=${dcache.net.listen}
# ftp.net.port-range=${dcache.net.wan.port.min}:${dcache.net.wan.port.max}
# ftp.net.internal =
# (one-of?true|false)ftp.proxy.on-passive=false
# (one-of?true|false)ftp.proxy.on-active=false
# ftp.performance-marker-period = 70
ftp.performance-marker-period=10
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)ftp.performance-marker-period.unit = SECONDS
# ftp.limits.retries = 80
ftp.limits.retries=3
# ftp.limits.streams-per-client = 10
# ftp.limits.clients = 100
ftp.limits.clients="-1"
# (one-of?true|false)ftp.enable.delete-on-failure = true
# ftp.mover.queue =
ftp.mover.queue=gridftpq
# ftp.transaction-log=
# (one-of?true|false|${dcache.enable.overwrite})ftp.enable.overwrite=${dcache.enable.overwrite}
# ftp.authn.ciphers=${dcache.authn.ciphers}
# (one-of?true|false|${dcache.enable.space-reservation})ftp.enable.space-reservation=${dcache.enable.space-reservation}
# ftp.service.poolmanager = ${ftp.service.poolmanager-space-${ftp.enable.space-reservation}}
# ftp.service.poolmanager.timeout = 5400
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)ftp.service.poolmanager.timeout.unit = SECONDS
# ftp.service.pool.timeout = 600
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)ftp.service.pool.timeout.unit = SECONDS
# ftp.service.pnfsmanager=${dcache.service.pnfsmanager}
# ftp.service.pnfsmanager.timeout=300
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)ftp.service.pnfsmanager.timeout.unit = SECONDS
# ftp.service.gplazma=${dcache.service.gplazma}
# ftp.service.billing=${dcache.service.billing}
# ftp.loginbroker.update-topic=${dcache.loginbroker.update-topic}
# ftp.loginbroker.request-topic=${dcache.loginbroker.request-topic}
# ftp.loginbroker.tags=${dcache.loginbroker.tags}
# ftp.loginbroker.update-period=${dcache.loginbroker.update-period}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.loginbroker.update-period.unit})ftp.loginbroker.update-period.unit=${dcache.loginbroker.update-period.unit}
# ftp.loginbroker.update-threshold=${dcache.loginbroker.update-threshold}
# ftp.loginbroker.family=${ftp.loginbroker.family.${ftp.authn.protocol}}
# ftp.loginbroker.version=${ftp.loginbroker.version.${ftp.authn.protocol}}
# ftp.loginbroker.family.plain=ftp
# ftp.loginbroker.version.plain=1.0.0
# ftp.loginbroker.family.gsi=gsiftp
# ftp.loginbroker.version.gsi=1.0.0
# ftp.loginbroker.family.kerberos=gkftp
# ftp.loginbroker.version.kerberos=1.0.0


#
# -- gplazma.properties --
#
# gplazma.cell.name=gPlazma
# gplazma.cell.limits.threads=30
# (one-of?true|false)gplazma.cell.export=true
# gplazma.configuration.file=${dcache.paths.etc}/gplazma.conf
# gplazma.service.pnfsmanager=${dcache.service.pnfsmanager}
# (one-of?true|false)gplazma.enable.plugin-creation-caching = true
# gplazma.gridmap.file=${dcache.paths.grid-security}/grid-mapfile
# gplazma.authzdb.file=${dcache.paths.grid-security}/storage-authzdb
# gplazma.authzdb.uid=uid,login,user,group
# gplazma.authzdb.gid=gid,login,group,user
# gplazma.vomsdir.dir=${dcache.authn.vomsdir}
# gplazma.vomsdir.ca=${dcache.authn.capath}
# gplazma.vorolemap.file=${dcache.paths.grid-security}/grid-vorolemap
# gplazma.argus.hostkey.password=
# gplazma.argus.hostkey=${dcache.authn.hostcert.key}
# gplazma.argus.hostcert=${dcache.authn.hostcert.cert}
# gplazma.argus.ca=${dcache.authn.capath}
# gplazma.argus.resource=dcache
# gplazma.argus.action=access
# gplazma.argus.endpoint=https://localhost:8154/authz
# gplazma.kpwd.file = ${dcache.paths.etc}/dcache.kpwd
# gplazma.nis.server=nisserv.example.org
# gplazma.nis.domain=example.org
# gplazma.jaas.name=gplazma
# gplazma.xacml.hostkey=${dcache.authn.hostcert.key}
# gplazma.xacml.hostcert=${dcache.authn.hostcert.cert}
# gplazma.xacml.ca=${dcache.authn.capath}
# gplazma.ldap.url = ldap://ldap.example.org:389
# gplazma.ldap.organization = o=YOUR-SITE,c=YOUR-COUNTRY
# gplazma.ldap.tree.people = People
# gplazma.ldap.tree.groups = Groups
# gplazma.ldap.userfilter = (uid=%s)
# (one-of?memberUid|uniqueMember)gplazma.ldap.group-member = memberUid
# gplazma.ldap.home-dir = "%homeDirectory%"
# gplazma.ldap.root-dir = "/"
# gplazma.banfile.path = ${dcache.paths.etc}/ban.conf
# gplazma.htpasswd.file = ${dcache.paths.etc}/htpasswd
# gplazma.htpasswd.file.cache-period = 1
# gplazma.htpasswd.file.cache-period.unit = SECONDS
#     runs as a cell and doors always contact a gplazma service.  To simulate \
#     useGPlazmaAuthorizationModule=true, run a non-exported gplazma service in the \
#     same domain as the door.  To simulate useGPlazmaAuthorizationModule=false and \
#     useGPlazmaAuthorizationCell=true, run an exported gplazma service somewhere in \
#     the dCache cluster.  To simulate useGPlazmaAuthorizationModule=false and \
#     useGPlazmaAuthorizationCell=false, run a non-exported gplazma service in the \
#     same domain as the door configured to use the local kpwd file.  For further \
#     details see the description of the gplazma.cell.name, <door>.service.gplazma \
#     (e.g., ftp.service.gplazma), and gplazma.cell.export properties.
#     runs as a cell and doors always contact a gplazma service.  If \
#     useGPlazmaAuthorizationModule=true then useGPlazmaAuthorizationCell property was \
#     ignored.  To simulate useGPlazmaAuthorizationModule=false and \
#     useGPlazmaAuthorizationCell=true, run an exported gplazma service somewhere in \
#     the dCache cluster.  To simulate useGPlazmaAuthorizationModule=false and \
#     useGPlazmaAuthorizationCell=false, run a non-exported gplazma service in the \
#     same domain as the door configured to use the local kpwd file.  For further \
#     details see the description of the gplazma.cell.name, <door>.service.gplazma \
#     (e.g., ftp.service.gplazma), and gplazma.cell.export properties.


#
# -- hoppingmanager.properties --
#
# hoppingmanager.cell.name=HoppingManager
# (one-of?true|false)hoppingmanager.cell.export=true
# hoppingmanager.config=${dcache.paths.config}/HoppingManager.conf


#
# -- httpd.properties --
#
# httpd.cell.name=httpd
# httpd.cell.subscribe=${httpd.loginbroker.update-topic}
# httpd.setup=${dcache.paths.etc}/httpd.conf
# httpd.service.alarms=${dcache.service.alarms}
# httpd.service.billing=${dcache.service.billing}
# httpd.service.gplazma=${dcache.service.gplazma}
# httpd.service.pnfsmanager=${dcache.service.pnfsmanager}
# httpd.service.poolmanager=${dcache.service.poolmanager}
# httpd.service.spacemanager=${dcache.service.spacemanager}
# httpd.enable.space-reservation=${dcache.enable.space-reservation}
# httpd.loginbroker.update-topic=${dcache.loginbroker.update-topic}
# httpd.loginbroker.request-topic=${dcache.loginbroker.request-topic}
# httpd.net.port = 2288
# (one-of?true|false)httpd.enable.authn = false
httpd.enable.authn=true
# httpd.net.listen=${dcache.net.listen}
# httpd.net.https-port = 8444
# httpd.authn.hostcert.cert=${dcache.authn.hostcert.cert}
# httpd.authn.hostcert.key=${dcache.authn.hostcert.key}
# httpd.authn.hostcert.refresh=${dcache.authn.hostcert.refresh}
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS|\
# 	${dcache.authn.hostcert.refresh.unit})\
# httpd.authn.hostcert.refresh.unit=${dcache.authn.hostcert.refresh.unit}
# httpd.authn.capath=${dcache.authn.capath}
# httpd.authn.capath.refresh=${dcache.authn.capath.refresh}
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS|\
# 	${dcache.authn.capath.refresh.unit})\
# httpd.authn.capath.refresh.unit=${dcache.authn.capath.refresh.unit}
# httpd.authz.admin-gid = 0
httpd.authz.admin-gid=600
# httpd.authn.ciphers = ${dcache.authn.ciphers}
# httpd.static-content.dir=${dcache.paths.share}/httpd/static
# httpd.static-content.scripts=${httpd.static-content.dir}/scripts
# httpd.static-content.docs=${httpd.static-content.dir}/docs
# httpd.static-content.images=${httpd.static-content.dir}/images
# httpd.static-content.styles=${httpd.static-content.dir}/styles
# httpd.static-content.index=${httpd.static-content.dir}/index.html
# httpd.static-content.plots=/var/lib/dcache/plots
# httpd.limits.idle-time = 30000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)httpd.limits.idle-time.unit = MILLISECONDS
# httpd.limits.threads = 100
# httpd.container.default-webapp = /org/dcache/admin/webadmin/jettycell/resources/webdefault.xml
# httpd.container.webapps.dir = ${dcache.paths.classes}/webapps
# httpd.html.dcache-instance-name = ${host.name}
httpd.html.dcache-instance-name=${info-provider.se-unique-id}
# httpd.html.dcache-instance-description = ${dcache.description}
httpd.html.dcache-instance-description="dCache test environment GridKa"
# httpd.service.pool.timeout=4000
# (one-of?MILLISECONDS|SECONDS|MINUTES)httpd.service.pool.timeout.unit=MILLISECONDS
# httpd.service.alarms.timeout=10000
# (one-of?MILLISECONDS|SECONDS|MINUTES)httpd.service.alarms.timeout.unit=MILLISECONDS
# httpd.service.billing.timeout=60000
# (one-of?MILLISECONDS|SECONDS|MINUTES)httpd.service.billing.timeout.unit=MILLISECONDS
# httpd.service.poolmonitor-collector.timeout=4000
# (one-of?MILLISECONDS|SECONDS|MINUTES)httpd.service.poolmonitor-collector.timeout.unit=MILLISECONDS
# httpd.service.poolmonitor-collector.period=4000
# (one-of?MILLISECONDS|SECONDS|MINUTES)httpd.service.poolmonitor-collector.period.unit=MILLISECONDS
# httpd.service.activetransfers-collector.timeout=5000
# (one-of?MILLISECONDS|SECONDS|MINUTES)httpd.service.activetransfers-collector.timeout.unit=MILLISECONDS
# httpd.service.activetransfers-collector.period=60000
# (one-of?MILLISECONDS|SECONDS|MINUTES)httpd.service.activetransfers-collector.period.unit=MILLISECONDS
# httpd.service.cellstatus-collector.timeout=5000
# (one-of?MILLISECONDS|SECONDS|MINUTES)httpd.service.cellstatus-collector.timeout.unit=MILLISECONDS
# httpd.service.cellstatus-collector.period=10000
# (one-of?MILLISECONDS|SECONDS|MINUTES)httpd.service.cellstatus-collector.period.unit=MILLISECONDS
# httpd.service.spacetoken-collector.timeout=5000
# (one-of?MILLISECONDS|SECONDS|MINUTES)httpd.service.spacetoken-collector.timeout.unit=MILLISECONDS
# httpd.service.spacetoken-collector.period=10000
# (one-of?MILLISECONDS|SECONDS|MINUTES)httpd.service.spacetoken-collector.period.unit=MILLISECONDS
# httpd.service.restorehandler-collector.timeout=5000
# (one-of?MILLISECONDS|SECONDS|MINUTES)httpd.service.restorehandler-collector.timeout.unit=MILLISECONDS
# httpd.service.restorehandler-collector.period=10000
# (one-of?MILLISECONDS|SECONDS|MINUTES)httpd.service.restorehandler-collector.period.unit=MILLISECONDS
# httpd.alarms.db.type = ${alarms.db.type}
# httpd.alarms.db.url = ${alarms.db.url}
# httpd.alarms.db.user = ${alarms.db.user}
# httpd.alarms.db.password = ${alarms.db.password}
# (one-of?true|false)httpd.enable.plots.billing = false
# (one-of?gif|png)httpd.plots.billing.type = png
# httpd.plots.billing.refresh = 5
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)httpd.plots.billing.refresh.unit = MINUTES
# httpd.plots.billing.height = 800
# httpd.plots.billing.width = 1200
# (one-of?CONNECTED|OUTLINE|FILLED)httpd.plots.billing.style = CONNECTED
# (one-of?lin|log)httpd.plots.billing.scale = log
# (one-of?true|false)httpd.enable.plots.pool-queue = false
# httpd.pool-queue.db.version = 2
# httpd.pool-queue.db.heartbeat-factor = 1.5
# httpd.plots.pool-queue.type = png
# httpd.plots.pool-queue.height = 800
# httpd.plots.pool-queue.width = 1158
# httpd.plots.pool-queue.x-span = 2
# (one-of?MINUTES|HOURS|DAYS)httpd.plots.pool-queue.x-span.unit = DAYS
# httpd.plots.pool-queue.min-time-step = 5
# (one-of?MINUTES|HOURS|DAYS)httpd.plots.pool-queue.min-time-step.unit = MINUTES
# (one-of?MINUTES|HOURS|DAYS)httpd.plots.pool-queue.major.unit = DAYS
# httpd.plots.pool-queue.grid.spacing.major = 1
# (one-of?MINUTES|HOURS|DAYS)httpd.plots.pool-queue.minor.unit = DAYS
# httpd.plots.pool-queue.grid.spacing.minor = 1
# httpd.plots.pool-queue.right-margin = 3
# httpd.plots.pool-queue.label-span = 24
# (one-of?MINUTES|HOURS|DAYS)httpd.plots.pool-queue.label.unit = DAYS
# httpd.plots.pool-queue.x-label.spacing = 1
# httpd.plots.pool-queue.x-label.format = E MMM dd YYYY HH:mm
# httpd.plots.pool-queue.y-label = Threads
# httpd.statistics.location=${statistics.location}


#
# -- info.properties --
#
# info.cell.name = info
# (one-of?true|false)info.cell.export = true
# info.cell.subscribe=${info.loginbroker.update-topic}
# info.service.spacemanager = ${dcache.service.spacemanager}
# info.service.topo = ${dcache.service.topo}
# info.service.poolmanager = ${dcache.service.poolmanager}
# info.net.port = 22112
# info.net.listen = 127.0.0.1
# info.net.backlog=5
# info.loginbroker.update-topic=${dcache.loginbroker.update-topic}


#
# -- info-provider.properties --
#
# info-provider.site-unique-id=EXAMPLESITE-ID
info-provider.site-unique-id=FZK-LCG2
# info-provider.se-unique-id=dcache-srm.example.org
info-provider.se-unique-id=ppssrm-kit.gridka.de
# info-provider.se-name = ${dcache.description}
# (one-of?Production|Queuing|Closed|Draining)info-provider.glue-se-status=Production
info-provider.glue-se-status=Closed
# (one-of?development|testing|pre-production|production)info-provider.dcache-quality-level=production
info-provider.dcache-quality-level=pre-production
# (one-of?disk|multidisk|tape|other)info-provider.dcache-architecture=multidisk
info-provider.dcache-architecture=tape
# info-provider.dit-parent=resource
# info-provider.paths.tape-info=${dcache.paths.share}/xml/tape-info-empty.xml
info-provider.paths.tape-info=${dcache.paths.etc}/tape-info.xml
# info-provider.door.tag = glue
# info-provider.http.host = localhost
info-provider.http.host=${dcache.hosts.service.httpd}
# info-provider.http.port = ${httpd.net.port}
# (one-of?1.3|2.0|both)info-provider.publish = both
# (one-of?xsltproc|saxon)info-provider.processor = saxon
# info-provider.configuration.site-specific.location=${dcache.paths.etc}/info-provider.xml
# info-provider.configuration.dir = ${dcache.paths.share}/info-provider
# info-provider.configuration.file = glue-${info-provider.publish}.xml
# info-provider.configuration.location = ${info-provider.configuration.dir}/${info-provider.configuration.file}
# info-provider.xylophone.dir = ${dcache.paths.share}/xml/xylophone
# info-provider.saxon.dir = ${dcache.paths.classes}/saxon
# info-provider.service.pinmanager = ${dcache.service.pinmanager}
# info-provider.service.poolmanager = ${dcache.service.poolmanager}
# (one-of?true|false|${dcache.enable.space-reservation})info-provider.enable.space-reservation = ${dcache.enable.space-reservation}


#
# -- missing-files.properties --
#
# missing-files.cell.name = MissingFiles
# (one-of?true|false)missing-files.cell.export = true
# missing-files.plugins =
# missing-files.limits.threads = 5
# dcache.service.missing-files = MissingFiles
# dcache.service.missing-files.timeout = 1000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
#   dcache.service.missing-files.timeout.unit = MILLISECONDS
# (one-of?true|false)dcache.enable.missing-files = false


#
# -- missingfiles-semsg.properties --
#
# missing-files.plugins.semsg.broker.host = semsg-broker.example.org
# missing-files.plugins.semsg.broker.port = 6166
# missing-files.plugins.semsg.auth-dn = \O=Grid\OU=Testing
# missing-files.plugins.semsg.max-files = 100
# missing-files.plugins.semsg.max-delay = 30
# missing-files.plugins.semsg.certificate = ${dcache.authn.hostcert.cert}
# missing-files.plugins.semsg.private-key = ${dcache.authn.hostcert.key}
# missing-files.plugins.semsg.command = SEMsg_SendNotAvailable
# missing-files.plugins.semsg.broker.topic = SEMsg_upstream
# missing-files.plugins.semsg.broker.wire-format = openwire
# missing-files.plugins.semsg.broker.endpoint = \
#         tcp://${missing-files.plugins.semsg.broker.host}:\
#         ${missing-files.plugins.semsg.broker.port}?\
#         wireFormat=${missing-files.plugins.semsg.broker.wire-format}


#
# -- nfs.properties --
#
# nfs.cell.name=NFS-${host.name}
# nfs.cell.export=true
# nfs.cell.subscribe=${nfs.loginbroker.request-topic}
# (any-of?3|4.1)nfs.version=3
# nfs.net.port = 2049
# nfs.domain=
# nfs.idmap.cache.size = 512
# nfs.idmap.cache.timeout = 30
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
# nfs.idmap.cache.timeout.unit = SECONDS
# (one-of?true|false)nfs.idmap.legacy = true
# nfs.mover.queue =
# (one-of?true|false)nfs.rpcsec_gss = false
# nfs.export.file=/etc/exports
# (one-of?true|false)nfs.enable.portmap=true
# (one-of?true|false|${dcache.enable.space-reservation})nfs.enable.space-reservation=${dcache.enable.space-reservation}
# nfs.loginbroker.update-topic=${dcache.loginbroker.update-topic}
# nfs.loginbroker.request-topic=${dcache.loginbroker.request-topic}
# nfs.loginbroker.tags=${dcache.loginbroker.tags}
# nfs.loginbroker.update-period=${dcache.loginbroker.update-period}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.loginbroker.update-period.unit})\
#   nfs.loginbroker.update-period.unit=${dcache.loginbroker.update-period.unit}
# nfs.loginbroker.update-threshold=${dcache.loginbroker.update-threshold}
# nfs.loginbroker.family = file
# nfs.loginbroker.version = nfs4.1
# nfs.service.poolmanager=${nfs.service.poolmanager-space-${nfs.enable.space-reservation}}
# nfs.service.poolmanager.timeout = 300000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)nfs.service.poolmanager.timeout.unit=MILLISECONDS
# nfs.service.pinmanager=${dcache.service.pinmanager}
# nfs.service.pinmanager.timeout=300000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)nfs.service.pinmanager.timeout.unit=MILLISECONDS
# nfs.service.pool.timeout = 10000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)nfs.service.pool.timeout.unit=MILLISECONDS
# nfs.service.gplazma=${dcache.service.gplazma}
# nfs.service.gplazma.timeout = 3000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)nfs.service.gplazma.timeout.unit=MILLISECONDS
# nfs.service.pnfsmanager=${dcache.service.pnfsmanager}
# nfs.service.billing=${dcache.service.billing}
# nfs.db.schema.auto=false
# nfs.db.connections.max = 30
# nfs.db.connections.idle = 1
# nfs.namespace-cache.time = 3
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)nfs.namespace-cache.time.unit = SECONDS
# nfs.namespace-cache.size = 0
# nfs.fs-stat-cache.time = 3600
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)nfs.fs-stat-cache.time.unit = SECONDS
# nfs.cell.limits.message.threads.max=8
# nfs.cell.limits.message.queue.max=1000


#
# -- paths.properties --
#
# dcache.paths.share=${dcache.home}
# dcache.paths.share.lib=${dcache.paths.share}/lib
# dcache.paths.xslt = ${dcache.paths.share}/xml/xslt
# dcache.paths.config=/var/lib/dcache/config
# dcache.paths.etc=/etc/dcache
# dcache.paths.bin=/usr/bin
# dcache.paths.lock.file=/var/run/subsys/dcache
# dcache.paths.classes=${dcache.home}/classes
# dcache.paths.lib=/usr/lib/dcache
# dcache.paths.billing=/var/lib/dcache/billing
# dcache.paths.statistics=/var/lib/dcache/statistics
# dcache.paths.plugins=/usr/share/dcache/plugins:/usr/local/share/dcache/plugins
# dcache.paths.setup=/etc/dcache/dcache.conf
# dcache.paths.classpath=${dcache.java.classpath}:${dcache.paths.classes}/\*
# dcache.paths.admin=${dcache.paths.etc}/admin
# dcache.paths.grid-security = /etc/grid-security


#
# -- pinmanager.properties --
#
# pinmanager.cell.name=PinManager
# (one-of?true|false)pinmanager.cell.export=true
# pinmanager.cell.threads.min=20
# pinmanager.cell.threads.max=45
# pinmanager.cell.threads.max-idle-time=60
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pinmanager.cell.threads.max-idle-time.unit=SECONDS
# pinmanager.cell.queue.max=10000
# pinmanager.service.poolmanager=${dcache.service.poolmanager}
# pinmanager.service.poolmanager.timeout=3600
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pinmanager.service.poolmanager.timeout.unit=SECONDS
# pinmanager.service.pnfsmanager=${dcache.service.pnfsmanager}
# pinmanager.service.pnfsmanager.timeout=300
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pinmanager.service.pnfsmanager.timeout.unit=SECONDS
# pinmanager.service.pool.timeout=90
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pinmanager.service.pool.timeout.unit=SECONDS
# pinmanager.db.host = ${dcache.db.host}
# pinmanager.db.name = pinmanager
pinmanager.db.name=${srm.db.name}
# pinmanager.db.user = ${dcache.db.user}
pinmanager.db.user=${srm.db.user}
# pinmanager.db.password = ${dcache.db.password}
# pinmanager.db.password.file = ${dcache.db.password.file}
# pinmanager.db.url=jdbc:postgresql://${pinmanager.db.host}/${pinmanager.db.name}
# pinmanager.db.schema.changelog=org/dcache/pinmanager/model/db.changelog-master.xml
# pinmanager.db.schema.auto=${dcache.db.schema.auto}
# pinmanager.db.connections.max = 50
# pinmanager.db.connections.idle = 1
# pinmanager.limits.pin-duration = -1
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pinmanager.limits.pin-duration.unit = SECONDS
# pinmanager.expiration-period=60
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pinmanager.expiration-period.unit=SECONDS
# pinmanager.authz.staging=${dcache.authz.staging}
# pinmanager.authz.staging.pep=${dcache.authz.staging.pep}


#
# -- pnfsmanager.properties --
#
# pnfsmanager.cell.name=PnfsManager
# (one-of?true|false)pnfsmanager.cell.export=true
# pnfsmanager.plugins.storage-info-extractor = org.dcache.chimera.namespace.ChimeraOsmStorageInfoExtractor
# pnfsmanager.limits.threads-per-group = 12
# pnfsmanager.limits.thread-groups = 1
# pnfsmanager.limits.list-threads = 2
# pnfsmanager.limits.list-chunk-size = 100
# pnfsmanager.limits.log-slow-threshold=0
# pnfsmanager.limits.queue-length = 0
# (one-of?true|false)pnfsmanager.enable.folding = true
# (one-of?true|false)pnfsmanager.enable.inherit-file-ownership = false
# (one-of?true|false)pnfsmanager.enable.full-path-permission-check = true
# (one-of?true|false)pnfsmanager.enable.acl = false
# (one-of?true|false|${dcache.enable.space-reservation})pnfsmanager.enable.space-reservation = ${dcache.enable.space-reservation}
# pnfsmanager.destination.flush-notification = ${pnfsmanager.destination.flush-notification-when-space-reservation-is-${pnfsmanager.enable.space-reservation}}
# pnfsmanager.destination.cache-notification = CacheLocationTopic
# pnfsmanager.service.spacemanager = ${dcache.service.spacemanager}
# (one-of?CUSTODIAL|REPLICA|OUTPUT)pnfsmanager.default-retention-policy = CUSTODIAL
pnfsmanager.default-retention-policy=REPLICA
# (one-of?ONLINE|NEARLINE)pnfsmanager.default-access-latency = NEARLINE
pnfsmanager.default-access-latency=ONLINE
# pnfsmanager.upload-directory=${dcache.upload-directory}
# pnfsmanager.db.connections.max = 30
# pnfsmanager.db.connections.idle = 1
# pnfsmanager.db.schema.auto=${dcache.db.schema.auto}
# pnfsmanager.atime-gap=-1


#
# -- poolmanager.properties --
#
# poolmanager.cell.name=PoolManager
# (one-of?true|false)poolmanager.cell.export=true
# poolmanager.cell.subscribe=PoolUpTopic,broadcast
# poolmanager.plugins.selection-unit = diskCacheV111.poolManager.PoolSelectionUnitV2
# poolmanager.plugins.quota-manager = none
# poolmanager.service.pnfsmanager=${dcache.service.pnfsmanager}
# poolmanager.service.billing=${dcache.service.billing}
# poolmanager.destination.pool-status=PoolStatusTopic
# poolmanager.service.pool.timeout=10000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)poolmanager.service.pool.timeout.unit=MILLISECONDS
# poolmanager.authz.staging=${dcache.authz.staging}
# (one-of?doors|PoolManager|${dcache.authz.staging.pep})poolmanager.authz.staging.pep=${dcache.authz.staging.pep}
# poolmanager.setup.file=/var/lib/dcache/config/poolmanager.conf
# (one-of?true|false)poolmanager.enable.cache-hit-message = false


#
# -- pool.properties --
#
# pool.name =
# pool.path =
pool.path=${poolbasedir}/${pool.name}
# pool.queues =
pool.queues=gridftpq,dcapq,xrootdq
# (one-of?|volatile|transient|precious|none)pool.lfs=none
# pool.size = Infinity
# pool.tags = hostname=${host.name}
# pool.check-health-command=
# (one-of?true|false)pool.enable.repository-check = true
# (one-of?true|false)pool.enable.remove-precious-files-on-delete = true
# pool.limits.worker-threads=5
# pool.cell.name=${pool.name}
# (one-of?true|false)pool.cell.export=true
# pool.cell.limits.message.threads.min=5
# pool.cell.limits.message.threads.max=50
# pool.cell.limits.message.threads.max-idle-time=60
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.cell.limits.message.threads.max-idle-time.unit=SECONDS
# pool.cell.limits.message.queue.max=1000
# pool.wait-for-files=
pool.wait-for-files=${pool.path}/data
# (one-of?org.dcache.pool.repository.meta.file.FileMetaDataRepository|\
#         org.dcache.pool.repository.meta.db.BerkeleyDBMetaDataRepository)\
# pool.plugins.meta = org.dcache.pool.repository.meta.file.FileMetaDataRepository
pool.plugins.meta=org.dcache.pool.repository.meta.db.BerkeleyDBMetaDataRepository
# pool.plugins.sweeper = org.dcache.pool.classic.SpaceSweeper2
# (one-of?true|false)pool.mover.nfs.rpcsec_gss = false
# pool.mover.nfs.port.min = ${dcache.net.lan.port.min}
# pool.mover.nfs.port.max = ${dcache.net.lan.port.max}
# pool.mover.dcap.port = 0
# (one-of?true|false)pool.mover.ftp.mmap = false
# pool.mover.ftp.read-ahead = 16777216
# (one-of?true|false)pool.mover.ftp.allow-incoming-connections=true
# (deprecated)pool.mover.xrootd.disk-threads = 20
# pool.mover.xrootd.threads = ${pool.mover.xrootd.disk-threads}
# pool.mover.xrootd.frame-size = 2097152
# pool.mover.xrootd.plugins=
# pool.mover.xrootd.timeout.idle = 300000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.mover.xrootd.timeout.idle.unit=MILLISECONDS
# pool.mover.xrootd.timeout.connect = 300
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.mover.xrootd.timeout.connect.unit = SECONDS
# pool.mover.xrootd.port.min = ${dcache.net.lan.port.min}
# pool.mover.xrootd.port.max = ${dcache.net.lan.port.max}
# (deprecated)pool.mover.http.disk-threads = 20
# pool.mover.http.threads = ${pool.mover.http.disk-threads}
# pool.mover.http.chunk-size = 8192
# (prefix)pool.mover.http.custom-response-header = HTTP headers that are always included in dCache responses
# pool.mover.http.custom-response-header!Server = dCache/${dcache.version}
# pool.mover.http.timeout.idle = 300
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.mover.http.timeout.idle.unit = SECONDS
# pool.mover.http.timeout.connect = 300
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.mover.http.timeout.connect.unit = SECONDS
# pool.mover.http.port.min = ${dcache.net.wan.port.min}
# pool.mover.http.port.max = ${dcache.net.wan.port.max}
# pool.authn.capath = ${dcache.authn.capath}
# pool.service.pnfsmanager=${dcache.service.pnfsmanager}
# pool.service.pnfsmanager.timeout=300
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.service.pnfsmanager.timeout.unit=SECONDS
# pool.service.billing=${dcache.service.billing}
# pool.service.pool.timeout=60
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.service.pool.timeout.unit=SECONDS
# pool.service.pnfsmanager.rate=250
# pool.service.poolmanager=${dcache.service.poolmanager}
# pool.service.poolmanager.timeout=120
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.service.poolmanager.timeout.unit=SECONDS
# pool.service.pinmanager=${dcache.service.pinmanager}
# pool.service.pinmanager.timeout=120
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.service.pinmanager.timeout.unit=SECONDS
# pool.service.door.timeout=3
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)pool.service.door.timeout.unit=SECONDS
# pool.destination.heartbeat = PoolUpTopic
# pool.destination.replicate =
# pool.destination.replicate.ip=


#
# -- replica.properties --
#
# replica.cell.name=replicaManager
# (one-of?true|false)replica.cell.export=true
# replica.cell.subscribe=PoolStatusTopic,CacheLocationTopic
# (one-of?true|false)dcache.enable.replica = false
# replica.poolgroup = ResilientPools
# replica.limits.pool-watchdog-period = 600
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)replica.limits.pool-watchdog-period.unit=SECONDS
# replica.limits.wait-db-update-timeout = 600
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)replica.limits.wait-db-update-timeout.unit=SECONDS
# replica.limits.excluded-files-expiration-timeout = 43200
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)replica.limits.excluded-files-expiration-timeout.unit=SECONDS
# replica.limits.delay-db-start-timeout = 1200
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)replica.limits.delay-db-start-timeout.unit=SECONDS
# replica.limits.adjust-start-timeout = 1200
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)replica.limits.adjust-start-timeout.unit=SECONDS
# replica.limits.wait-replicate-timeout = 43200
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)replica.limits.wait-replicate-timeout.unit=SECONDS
# replica.limits.wait-reduce-timeout = 43200
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)replica.limits.wait-reduce-timeout.unit=SECONDS
# replica.limits.workers = 6
# replica.limits.replicas.min = 2
# replica.limits.replicas.max = 3
# (one-of?true|false)replica.enable.check-pool-host = true
# (one-of?true|false)replica.enable.same-host-replica = false
# replica.db.host = ${dcache.db.host}
# replica.db.name = replica
# replica.db.user = ${dcache.db.user}
# replica.db.password = ${dcache.db.password}
# replica.db.password.file = ${dcache.db.password.file}
# replica.db.url=jdbc:postgresql://${replica.db.host}/${replica.db.name}
# replica.db.schema.changelog=


#
# -- spacemanager.properties --
#
# spacemanager.cell.name=SpaceManager
# (one-of?true|false)spacemanager.cell.export=true
# (one-of?true|false)spacemanager.enable.unreserved-uploads-to-linkgroups = false
spacemanager.enable.unreserved-uploads-to-linkgroups=true
# spacemanager.authz.link-group-file-name =
spacemanager.authz.link-group-file-name=${dcache.paths.etc}/LinkGroupAuthorization.conf
# spacemanager.link-groups-update.period=3
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)spacemanager.link-groups-update.period.unit=MINUTES
# spacemanager.expire-space-reservation.period=3
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)spacemanager.expire-space-reservation.period.unit=MINUTES
# spacemanager.perished-space-purge-delay = 30
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)spacemanager.perished-space-purge-delay.unit = DAYS
# spacemanager.service.pnfsmanager=${dcache.service.pnfsmanager}
# spacemanager.service.pnfsmanager.timeout=300
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)spacemanager.service.pnfsmanager.timeout.unit=SECONDS
# spacemanager.service.poolmanager=${dcache.service.poolmanager}
# spacemanager.service.poolmanager.timeout=300
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)spacemanager.service.poolmanager.timeout.unit=SECONDS
# spacemanager.limits.threads=20
# (one-of?true|false|${dcache.enable.space-reservation})spacemanager.enable.space-reservation=${dcache.enable.space-reservation}
# spacemanager.db.host = ${dcache.db.host}
# spacemanager.db.name = spacemanager
spacemanager.db.name=${srm.db.name}
# spacemanager.db.user = ${dcache.db.user}
spacemanager.db.user=${srm.db.user}
# spacemanager.db.password = ${dcache.db.password}
# spacemanager.db.password.file= ${dcache.db.password.file}
# spacemanager.db.url = jdbc:postgresql://${spacemanager.db.host}/${spacemanager.db.name}
# spacemanager.db.connections.max=30
# spacemanager.db.connections.idle = 1
# spacemanager.db.schema.auto=${dcache.db.schema.auto}
# spacemanager.db.schema.changelog=diskCacheV111/services/space/db/spacemanager.changelog-master.xml


#
# -- srm.properties --
#
# srm.cell.name=SRM-${host.name}
# (one-of?true|false)srm.cell.export=true
# srm.cell.subscribe=${srm.loginbroker.update-topic},${srm.loginbroker.request-topic},${srm.credential-service.topic}
# srm.cell.limits.message.threads.max = 10
# srm.cell.limits.message.queue.max = 100
# srm.net.port = 8443
# srm.net.ssl-port = 8445
# srm.net.listen=${dcache.net.listen}
# srm.net.host = ${host.fqdn}
# srm.net.local-hosts=${srm.net.host}
# (one-of?SSL|GSI)srm.client-transport = GSI
# srm.db.host = ${dcache.db.host}
srm.db.host=${dcache.hosts.database.srm}
# srm.db.name = srm
srm.db.name=dcache
# srm.db.user = ${dcache.db.user}
srm.db.user=srmdcache
# srm.db.password = ${dcache.db.password}
# srm.db.password.file = ${dcache.db.password.file}
# srm.db.url = jdbc:postgresql://${srm.db.host}/${srm.db.name}
# srm.db.connections.max = 50
# srm.db.connections.idle = 1
# srm.limits.parallel-streams = 10
# srm.limits.external-copy-script.timeout = 3600
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
# srm.limits.external-copy-script.timeout.unit=SECONDS
# srm.limits.transfer-buffer.size = 1048576
# srm.limits.transfer-tcp-buffer.size = 1048576
# (one-of?true|false)srm.enable.external-copy-script.debug = true
# srm.limits.jetty-connector.acceptors = 1
# srm.limits.jetty-connector.idle-time.max = 60000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
# srm.limits.jetty-connector.idle-time.max.unit=MILLISECONDS
# srm.limits.jetty-connector.low-resource.max.idle-time = 20000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
# srm.limits.jetty-connector.low-resource.max.idle-time.unit=MILLISECONDS
# srm.limits.jetty-connector.backlog = 2048
# srm.limits.jetty.threads.max = 500
# srm.limits.jetty.threads.min = 10
# srm.limits.jetty.threads.idle-time.max = 30000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
# srm.limits.jetty.threads.idle-time.max.unit=MILLISECONDS
# srm.limits.jetty.threads.queued.max = 500
# (one-of?true|false)srm.enable.legacy-close=true
# srm.request.threads = 12
# srm.request.get.threads = ${srm.request.threads}
# srm.request.bring-online.threads = ${srm.request.threads}
# srm.request.put.threads = ${srm.request.threads}
# srm.request.copy.threads = ${srm.request.copy.max-inprogress}
# srm.request.ls.threads = ${srm.request.ls.max-inprogress}
# srm.request.reserve-space.threads = ${srm.request.threads}
# srm.request.max-requests = 50000
# srm.request.get.max-requests = ${srm.request.max-requests}
# srm.request.bring-online.max-requests = ${srm.request.max-requests}
# srm.request.put.max-requests = ${srm.request.max-requests}
# srm.request.copy.max-requests = ${srm.request.max-requests}
# srm.request.ls.max-requests = ${srm.request.max-requests}
# srm.request.reserve-space.max-requests = ${srm.request.max-requests}
# srm.request.get.max-inprogress = 1000
# srm.request.bring-online.max-inprogress = 10000
# srm.request.copy.max-inprogress = 1000
# srm.request.put.max-inprogress = 50
# srm.request.ls.max-inprogress = 50
# srm.request.reserve-space.max-inprogress = 10
# srm.request.max-transfers=50000
# srm.request.get.max-transfers = ${srm.request.max-transfers}
# srm.request.put.max-transfers = ${srm.request.max-transfers}
# srm.request.retries=10
# srm.request.get.retries = ${srm.request.retries}
# srm.request.bring-online.retries = ${srm.request.retries}
# srm.request.put.retries = ${srm.request.retries}
# srm.request.copy.retries = ${srm.request.retries}
# srm.request.ls.retries = ${srm.request.retries}
# srm.request.reserve-space.retries = ${srm.request.retries}
# srm.request.retry-timeout = 60000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
# srm.request.retry-timeout.unit = MILLISECONDS
# srm.request.get.retry-timeout = ${srm.request.retry-timeout}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.retry-timeout.unit})\
# srm.request.get.retry-timeout.unit=${srm.request.retry-timeout.unit}
# srm.request.bring-online.retry-timeout = ${srm.request.retry-timeout}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.retry-timeout.unit})\
# srm.request.bring-online.retry-timeout.unit=${srm.request.retry-timeout.unit}
# srm.request.put.retry-timeout = ${srm.request.retry-timeout}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.retry-timeout.unit})\
# srm.request.put.retry-timeout.unit=${srm.request.retry-timeout.unit}
# srm.request.copy.retry-timeout = ${srm.request.retry-timeout}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.retry-timeout.unit})\
# srm.request.copy.retry-timeout.unit=${srm.request.retry-timeout.unit}
# srm.request.ls.retry-timeout = ${srm.request.retry-timeout}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.retry-timeout.unit})\
# srm.request.ls.retry-timeout.unit=${srm.request.retry-timeout.unit}
# srm.request.reserve-space.retry-timeout = ${srm.request.retry-timeout}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.retry-timeout.unit})\
# srm.request.reserve-space.retry-timeout.unit=${srm.request.retry-timeout.unit}
# srm.request.max-by-same-user = 100
# srm.request.get.max-by-same-user = ${srm.request.max-by-same-user}
# srm.request.bring-online.max-by-same-user = ${srm.request.max-by-same-user}
# srm.request.put.max-by-same-user = ${srm.request.max-by-same-user}
# srm.request.copy.max-by-same-user = ${srm.request.max-by-same-user}
# srm.request.ls.max-by-same-user = ${srm.request.max-by-same-user}
# srm.request.reserve-space.max-by-same-user = ${srm.request.max-by-same-user}
# srm.request.switch-to-async-mode-delay = 1000
# (one-of?MILLISECONDS|SECONDS|MINUTES)\
# srm.request.switch-to-async-mode-delay.unit=MILLISECONDS
# srm.request.get.switch-to-async-mode-delay = ${srm.request.switch-to-async-mode-delay}
# (one-of?MILLISECONDS|SECONDS|MINUTES|${srm.request.switch-to-async-mode-delay.unit})\
# srm.request.get.switch-to-async-mode-delay.unit = ${srm.request.switch-to-async-mode-delay.unit}
# srm.request.bring-online.switch-to-async-mode-delay = ${srm.request.switch-to-async-mode-delay}
# (one-of?MILLISECONDS|\
# 	SECONDS|MINUTES|\
# 	HOURS|DAYS|\
# 	${srm.request.switch-to-async-mode-delay.unit})\
# srm.request.bring-online.switch-to-async-mode-delay.unit=${srm.request.switch-to-async-mode-delay.unit}
# srm.request.put.switch-to-async-mode-delay = ${srm.request.switch-to-async-mode-delay}
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS|\
# 	${srm.request.switch-to-async-mode-delay.unit})\
# srm.request.put.switch-to-async-mode-delay.unit=${srm.request.switch-to-async-mode-delay.unit}
# srm.request.ls.switch-to-async-mode-delay = ${srm.request.switch-to-async-mode-delay}
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS|\
# 	${srm.request.switch-to-async-mode-delay.unit})\
# srm.request.ls.switch-to-async-mode-delay.unit=${srm.request.switch-to-async-mode-delay.unit}
# srm.request.max-poll-period = 60
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
# srm.request.max-poll-period.unit = SECONDS
# srm.request.get.max-poll-period = ${srm.request.max-poll-period}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.max-poll-period.unit})\
# srm.request.get.max-poll-period.unit = ${srm.request.max-poll-period.unit}
# srm.request.put.max-poll-period = ${srm.request.max-poll-period}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.max-poll-period.unit})\
# srm.request.put.max-poll-period.unit = ${srm.request.max-poll-period.unit}
# srm.request.bring-online.max-poll-period = ${srm.request.max-poll-period}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.max-poll-period.unit})\
# srm.request.bring-online.max-poll-period.unit = ${srm.request.max-poll-period.unit}
# srm.request.ls.max-poll-period = ${srm.request.max-poll-period}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.max-poll-period.unit})\
# srm.request.ls.max-poll-period.unit = ${srm.request.max-poll-period.unit}
# srm.request.reserve-space.max-poll-period = ${srm.request.max-poll-period}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.max-poll-period.unit})\
# srm.request.reserve-space.max-poll-period.unit = ${srm.request.max-poll-period.unit}
# srm.request.copy.max-poll-period = ${srm.request.max-poll-period}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.max-poll-period.unit})\
# srm.request.copy.max-poll-period.unit = ${srm.request.max-poll-period.unit}
# (one-of?true|false)srm.persistence.enable = true
# (one-of?true|false|${srm.persistence.enable})srm.persistence.get.enable = ${srm.persistence.enable}
# (one-of?true|false|${srm.persistence.enable})srm.persistence.bring-online.enable = ${srm.persistence.enable}
# (one-of?true|false|${srm.persistence.enable})srm.persistence.put.enable = ${srm.persistence.enable}
# (one-of?true|false|${srm.persistence.enable})srm.persistence.copy.enable = ${srm.persistence.enable}
# (one-of?true|false|${srm.persistence.enable})srm.persistence.ls.enable = ${srm.persistence.enable}
# (one-of?true|false|${srm.persistence.enable})srm.persistence.reserve-space.enable = ${srm.persistence.enable}
# (one-of?true|false)srm.persistence.enable.clean-pending-on-restart=false
# (one-of?true|false|${srm.persistence.enable.clean-pending-on-restart})\
# srm.persistence.get.enable.clean-pending-on-restart = ${srm.persistence.enable.clean-pending-on-restart}
# (one-of?true|false|${srm.persistence.enable.clean-pending-on-restart})\
# srm.persistence.bring-online.enable.clean-pending-on-restart = ${srm.persistence.enable.clean-pending-on-restart}
# (one-of?true|false|${srm.persistence.enable.clean-pending-on-restart})\
# srm.persistence.put.enable.clean-pending-on-restart = ${srm.persistence.enable.clean-pending-on-restart}
# (one-of?true|false|${srm.persistence.enable.clean-pending-on-restart})\
# srm.persistence.copy.enable.clean-pending-on-restart = ${srm.persistence.enable.clean-pending-on-restart}
# (one-of?true|false|${srm.persistence.enable.clean-pending-on-restart})\
# srm.persistence.ls.enable.clean-pending-on-restart = ${srm.persistence.enable.clean-pending-on-restart}
# (one-of?true|false|${srm.persistence.enable.clean-pending-on-restart})\
# srm.persistence.reserve-space.enable.clean-pending-on-restart = ${srm.persistence.enable.clean-pending-on-restart}
# srm.persistence.keep-history-period = 10
# (one-of?HOURS|DAYS)srm.persistence.keep-history-period.unit=DAYS
# srm.persistence.get.keep-history-period = ${srm.persistence.keep-history-period}
# (one-of?HOURS|DAYS|${srm.persistence.keep-history-period.unit})\
# srm.persistence.get.keep-history-period.unit=${srm.persistence.keep-history-period.unit}
# srm.persistence.bring-online.keep-history-period = ${srm.persistence.keep-history-period}
# (one-of?HOURS|DAYS|${srm.persistence.keep-history-period.unit})\
# srm.persistence.bring-online.keep-history-period.unit=${srm.persistence.keep-history-period.unit}
# srm.persistence.put.keep-history-period = ${srm.persistence.keep-history-period}
# (one-of?HOURS|DAYS|${srm.persistence.keep-history-period.unit})\
# srm.persistence.put.keep-history-period.unit=${srm.persistence.keep-history-period.unit}
# srm.persistence.copy.keep-history-period = ${srm.persistence.keep-history-period}
# (one-of?HOURS|DAYS|${srm.persistence.keep-history-period.unit})\
# srm.persistence.copy.keep-history-period.unit=${srm.persistence.keep-history-period.unit}
# srm.persistence.ls.keep-history-period = ${srm.persistence.keep-history-period}
# (one-of?HOURS|DAYS|${srm.persistence.keep-history-period.unit})\
# srm.persistence.ls.keep-history-period.unit=${srm.persistence.keep-history-period.unit}
# srm.persistence.reserve-space.keep-history-period = ${srm.persistence.keep-history-period}
# (one-of?HOURS|DAYS|${srm.persistence.keep-history-period.unit})\
# srm.persistence.reserve-space.keep-history-period.unit=${srm.persistence.keep-history-period.unit}
# srm.persistence.remove-expired-period = 600
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
# srm.persistence.remove-expired-period.unit=SECONDS
# srm.persistence.get.remove-expired-period = ${srm.persistence.remove-expired-period}
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS|\
# 	${srm.persistence.remove-expired-period.unit})\
# srm.persistence.get.remove-expired-period.unit=${srm.persistence.remove-expired-period.unit}
# srmBringOnlineExpiredRequestRemovalPeriod = Use srm.persistence.bring-online.remove-expired-period
# srm.persistence.bring-online.remove-expired-period = ${srm.persistence.remove-expired-period}
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS|\
# 	${srm.persistence.remove-expired-period.unit})\
# srm.persistence.bring-online.remove-expired-period.unit=${srm.persistence.remove-expired-period.unit}
# srm.persistence.put.remove-expired-period = ${srm.persistence.remove-expired-period}
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS|\
# 	${srm.persistence.remove-expired-period.unit})\
# srm.persistence.put.remove-expired-period.unit=${srm.persistence.remove-expired-period.unit}
# srm.persistence.copy.remove-expired-period = ${srm.persistence.remove-expired-period}
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|DAYS|\
# 	${srm.persistence.remove-expired-period.unit})\
# srm.persistence.copy.remove-expired-period.unit=${srm.persistence.remove-expired-period.unit}
# srm.persistence.ls.remove-expired-period = ${srm.persistence.remove-expired-period}
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS|\
# 	${srm.persistence.remove-expired-period.unit})\
# 	srm.persistence.ls.remove-expired-period.unit=${srm.persistence.remove-expired-period.unit}
# srmReserveExpiredRequestRemovalPeriod = Use srm.persistence.reserve-space.remove-expired-period
# srm.persistence.reserve-space.remove-expired-period = ${srm.persistence.remove-expired-period}
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS|\
# 	${srm.persistence.remove-expired-period.unit})\
# srm.persistence.reserve-space.remove-expired-period.unit=${srm.persistence.remove-expired-period.unit}
# (one-of?true|false)\
# srm.persistence.enable.history = true
# (one-of?true|false|${srm.persistence.enable.history})\
# srm.persistence.get.enable.history = ${srm.persistence.enable.history}
# (one-of?true|false|${srm.persistence.enable.history})\
# srm.persistence.bring-online.enable.history = ${srm.persistence.enable.history}
# (one-of?true|false|${srm.persistence.enable.history})\
# srm.persistence.put.enable.history = ${srm.persistence.enable.history}
# (one-of?true|false|${srm.persistence.enable.history})\
# srm.persistence.copy.enable.history = ${srm.persistence.enable.history}
# (one-of?true|false|${srm.persistence.enable.history})\
# srm.persistence.ls.enable.history = ${srm.persistence.enable.history}
# (one-of?true|false|${srm.persistence.enable.history})\
# srm.persistence.reserve-space.enable.history = ${srm.persistence.enable.history}
# (one-of?true|false)srm.persistence.enable.store-transient-state = false
# (one-of?true|false|${srm.persistence.enable.store-transient-state})\
# srm.persistence.get.enable.store-transient-state = ${srm.persistence.enable.store-transient-state}
# (one-of?true|false|${srm.persistence.enable.store-transient-state})\
# srm.persistence.bring-online.enable.store-transient-state = ${srm.persistence.enable.store-transient-state}
# (one-of?true|false|${srm.persistence.enable.store-transient-state})\
# srm.persistence.put.enable.store-transient-state = ${srm.persistence.enable.store-transient-state}
# (one-of?true|false|${srm.persistence.enable.store-transient-state})\
# srm.persistence.copy.enable.store-transient-state = ${srm.persistence.enable.store-transient-state}
# (one-of?true|false|${srm.persistence.enable.store-transient-state})\
# srm.persistence.ls.enable.store-transient-state = ${srm.persistence.enable.store-transient-state}
# (one-of?true|false|${srm.persistence.enable.store-transient-state})\
# srm.persistence.reserve-space.enable.store-transient-state = ${srm.persistence.enable.store-transient-state}
# srm.limits.ls.entries = 10000
# srm.limits.ls.levels = infinity
# srm.request.lifetime=14400000
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS)\
# srm.request.lifetime.unit=MILLISECONDS
# srm.request.get.lifetime = ${srm.request.lifetime}
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS|\
# 	${srm.request.lifetime.unit})\
# srm.request.get.lifetime.unit=${srm.request.lifetime.unit}
# srm.request.bring-online.lifetime = ${srm.request.lifetime}
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS|\
# 	${srm.request.lifetime.unit})\
# srm.request.bring-online.lifetime.unit=${srm.request.lifetime.unit}
# srm.request.put.lifetime = ${srm.request.lifetime}
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS|\
# 	${srm.request.lifetime.unit})\
# srm.request.put.lifetime.unit=${srm.request.lifetime.unit}
# srm.request.copy.lifetime = ${srm.request.lifetime}
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS|\
# 	${srm.request.lifetime.unit})\
# srm.request.copy.lifetime.unit=${srm.request.lifetime.unit}
# srm.root = /
# srm.service.pnfsmanager=${dcache.service.pnfsmanager}
# srm.service.pnfsmanager.timeout = 120
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|DAYS)\
# srm.service.pnfsmanager.timeout.unit=SECONDS
# srm.service.gplazma=${dcache.service.gplazma}
# srm.service.gplazma.timeout=30000
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS)\
# srm.service.gplazma.timeout.unit=MILLISECONDS
# srm.service.gplazma.cache.size=1000
# srm.service.gplazma.cache.timeout = 180
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS)\
# srm.service.gplazma.cache.timeout.unit=SECONDS
# srm.service.spacemanager=${dcache.service.spacemanager}
# srm.service.spacemanager.timeout=30
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS)\
# srm.service.spacemanager.timeout.unit=SECONDS
# srm.service.transfermanager=${dcache.service.transfermanager}
# srm.service.transfermanager.timeout=24
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS)\
# srm.service.transfermanager.timeout.unit=HOURS
# srm.service.copymanager=${dcache.service.copymanager}
# srm.service.copymanager.timeout=24
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS)\
# srm.service.copymanager.timeout.unit=HOURS
# srm.service.billing = ${dcache.service.billing}
# srm.service.pinmanager=${dcache.service.pinmanager}
# srm.service.pinmanager.timeout=60
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS)\
# srm.service.pinmanager.timeout.unit=MINUTES
# srm.service.poolmanager=${dcache.service.poolmanager}
# srm.service.poolmanager.timeout = 300
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS)\
# srm.service.poolmanager.timeout.unit=SECONDS
# srm.credential-service.topic = ${dcache.credential-service.topic}
# srm.loginbroker.update-topic= ${dcache.loginbroker.update-topic}
# srm.loginbroker.request-topic= ${dcache.loginbroker.request-topic}
# srm.loginbroker.tags= ${dcache.loginbroker.tags}
# srm.loginbroker.update-period = ${dcache.loginbroker.update-period}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.loginbroker.update-period.unit})srm.loginbroker.update-period.unit = ${dcache.loginbroker.update-period.unit}
# srm.loginbroker.update-threshold = ${dcache.loginbroker.update-threshold}
# srm.loginbroker.version = 1.1.1
# srm.loginbroker.family = srm
# (one-of?true|false)srm.enable.recursive-directory-creation = true
# (one-of?true|false)srm.enable.advisory-delete = true
# (one-of?true|false|${dcache.enable.overwrite})\
# srm.enable.overwrite=${dcache.enable.overwrite}
# (one-of?true|false)\
# srm.enable.overwrite-by-default = false
# srm.limits.remove-batch-size = 50
# srm.authn.hostcert.cert=${dcache.authn.hostcert.cert}
# srm.authn.hostcert.key=${dcache.authn.hostcert.key}
# srm.authn.hostcert.refresh=${dcache.authn.hostcert.refresh}
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS|\
# 	${dcache.authn.hostcert.refresh.unit})\
# srm.authn.hostcert.refresh.unit=${dcache.authn.hostcert.refresh.unit}
# srm.authn.capath=${dcache.authn.capath}
# srm.authn.capath.refresh=${dcache.authn.capath.refresh}
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS|\
# 	${dcache.authn.capath.refresh.unit})\
# srm.authn.capath.refresh.unit=${dcache.authn.capath.refresh.unit}
# srm.authn.vomsdir=${dcache.authn.vomsdir}
# srm.user.credentials.directory = /var/lib/dcache/credentials
# srm.limits.db.threads = 5
# srm.limits.db.queue = 1000
# (one-of?true|false)srm.enable.client-dns-lookup = false
# srm.limits.jetty.graceful-shutdown = 2000
# (one-of?MILLISECONDS|\
# 	SECONDS|\
# 	MINUTES|\
# 	HOURS|\
# 	DAYS)\
# srm.limits.jetty.graceful-shutdown.unit=MILLISECONDS
# (one-of?true|false)srm.enable.custom-get-host-by-address = false
# srm.protocols.disallowed.get = file,${srm.loginbroker.family}
# srm.protocols.disallowed.put = http,file,${srm.loginbroker.family}
# srm.protocols.preferred =
# srm.protocols.tags = srm
# srm.protocols.population-size = 5
# (one-of?true|false)srm.enable.pin-online-files = true
# srm.plugins.qos.class =
# srm.plugins.qos.config.file =
# (one-of?true|false|${dcache.enable.space-reservation})\
# srm.enable.space-reservation=${dcache.enable.space-reservation}
# srm.authn.ciphers = ${dcache.authn.ciphers}
# (one-of?true|false)srm.enable.third-party.requiring-verification-by-default = true
# (prefix)srm.ping-extra-info = The ExtraInfo items in an srmPing response.
# srm.ping-extra-info!backend_type = dCache
# srm.ping-extra-info!backend_version = ${dcache.version}


#
# -- star.properties --
#
# star.site = ${info-provider.site-unique-id}
# star.storage-system = ${info-provider.se-unique-id}
# star.spool.dir = /var/spool/dcache/star
# star.last-update.path = /var/lib/dcache/star/last-update
# star.polling-period = 90000
# star.spool.dir-granularity = 60
# star.gid-mapping =
# star.storage-share-mapping =


#
# -- statistics.properties --
#
# statistics.cell.name=PoolStatistics
# statistics.location = ${dcache.paths.statistics}


#
# -- topo.properties --
#
# topo.cell.name=topo
# (one-of?true|false)topo.cell.export=true
# topo.limits.refresh-period = 300000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)topo.limits.refresh-period.unit = MILLISECONDS
# topo.service.system.timeout = 20000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)topo.service.system.timeout.unit = MILLISECONDS


#
# -- transfermanagers.properties --
#
# transfermanagers.cell.name=RemoteTransferManager
# (one-of?true|false)transfermanagers.cell.export=true
# (deprecated)transfermanagers.enable.log-to-database=false
# transfermanagers.service.pool.timeout = 300
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)transfermanagers.service.pool.timeout.unit=SECONDS
# transfermanagers.service.pnfsmanager=${dcache.service.pnfsmanager}
# transfermanagers.service.pnfsmanager.timeout = 300
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)transfermanagers.service.pnfsmanager.timeout.unit = SECONDS
# transfermanagers.service.poolmanager=${transfermanagers.service.poolmanager-when-space-reservations-${transfermanagers.enable.space-reservation}}
# transfermanagers.service.poolmanager.timeout = 300
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)transfermanagers.service.poolmanager.timeout.unit = SECONDS
# transfermanagers.service.spacemanager=${dcache.service.spacemanager}
# transfermanagers.service.billing=${dcache.service.billing}
# transfermanagers.service.billing.timeout = 300
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)transfermanagers.service.billing.timeout.unit = SECONDS
# transfermanagers.limits.internal-transfers = 150
# transfermanagers.limits.external-transfers = 1000
# transfermanagers.mover.queue =
transfermanagers.mover.queue=${ftp.mover.queue}
# transfermanagers.limits.transfer-time = 7200
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)transfermanagers.limits.transfer-time.unit=SECONDS
# (one-of?true|false|${dcache.enable.space-reservation})transfermanagers.enable.space-reservation=${dcache.enable.space-reservation}
# (one-of?true|false|${transfermanagers.enable.log-to-database})transfermanagers.enable.db=${transfermanagers.enable.log-to-database}
# transfermanagers.db.host = ${dcache.db.host}
# transfermanagers.db.name = transfermanagers
# transfermanagers.db.user = ${dcache.db.user}
# transfermanagers.db.password = ${dcache.db.password}
# transfermanagers.db.password.file = ${dcache.db.password.file}
# transfermanagers.db.url=jdbc:postgresql://${transfermanagers.db.host}/${transfermanagers.db.name}


#
# -- wait-for-cells.properties --
#
# wait-for-cells.poll = 5
# wait-for-cells.http.host = localhost
# wait-for-cells.http.port = ${httpd.net.port}


#
# -- webdav.properties --
#
# webdav.cell.name=WebDAV-${host.name}
# (one-of?true|false)webdav.cell.export=true
# webdav.cell.subscribe=${webdav.loginbroker.request-topic},${webdav.credential-service.topic}
# (one-of?true|false|${dcache.enable.space-reservation})webdav.enable.space-reservation=${dcache.enable.space-reservation}
# (one-of?true|false|${dcache.enable.missing-files})webdav.enable.missing-files=${dcache.enable.missing-files}
# webdav.service.pnfsmanager=${dcache.service.pnfsmanager}
# webdav.service.pnfsmanager.timeout = 120000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)webdav.service.pnfsmanager.timeout.unit=MILLISECONDS
# webdav.service.transfermanager = ${dcache.service.transfermanager}
# webdav.service.transfermanager.timeout = 30
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
# webdav.service.transfermanager.timeout.unit = SECONDS
# webdav.service.poolmanager=${webdav.service.poolmanager-space-${webdav.enable.space-reservation}}
# webdav.service.poolmanager.timeout = 300000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)webdav.service.poolmanager.timeout.unit=MILLISECONDS
# webdav.service.pool.timeout = 10000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)webdav.service.pool.timeout.unit=MILLISECONDS
# webdav.service.gplazma=${dcache.service.gplazma}
# webdav.service.gplazma.timeout = 180000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)webdav.service.gplazma.timeout.unit=MILLISECONDS
# webdav.service.billing=${dcache.service.billing}
# webdav.service.missing-files=${dcache.service.missing-files}
# webdav.service.missing-files.timeout=${dcache.service.missing-files.timeout}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.service.missing-files.timeout.unit})\
#   webdav.service.missing-files.timeout.unit=${dcache.service.missing-files.timeout.unit}
# webdav.mover.queue =
# webdav.mover.kill-timeout = 1500
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)webdav.mover.kill-timeout.unit=MILLISECONDS
# webdav.mover.timeout = 180000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)webdav.mover.timeout.unit=MILLISECONDS
# webdav.mover.transfer-confirmation-timeout = 60000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)webdav.mover.transfer-confirmation-timeout.unit=MILLISECONDS
# webdav.loginbroker.update-topic = ${dcache.loginbroker.update-topic}
# webdav.loginbroker.request-topic = ${dcache.loginbroker.request-topic}
# webdav.loginbroker.tags=${dcache.loginbroker.tags}
# webdav.loginbroker.update-period=${dcache.loginbroker.update-period}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.loginbroker.update-period.unit})\
#   webdav.loginbroker.update-period.unit=${dcache.loginbroker.update-period.unit}
# webdav.loginbroker.update-threshold=${dcache.loginbroker.update-threshold}
# webdav.loginbroker.version=1.1
# webdav.loginbroker.family=${webdav.loginbroker.family-${webdav.authn.protocol}}
# webdav.credential-service.timeout = ${dcache.credential-service.timeout}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.credential-service.timeout.unit})\
# webdav.credential-service.timeout.unit = ${dcache.credential-service.timeout.unit}
# webdav.credential-service.topic = ${dcache.credential-service.topic}
# webdav.third-party-transfers.performance-marker-period = 5
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
# webdav.third-party-transfers.performance-marker-period.unit = SECONDS
# (one-of?true|false)webdav.enable.third-party.requiring-verification-by-default = true
# webdav.net.port = 2880
# webdav.net.listen = ${dcache.net.listen}
# webdav.net.internal=
# (one-of?true|false)webdav.redirect.on-read=true
# (one-of?true|false)webdav.redirect.on-write=true
# webdav.root = /
# (one-of?true|false|${dcache.enable.overwrite})webdav.enable.overwrite = ${dcache.enable.overwrite}
# webdav.authz.upload-directory=${dcache.upload-directory}
# webdav.authz.allowed-paths = /
webdav.authz.allowed-paths=/pnfs/gridka.de/ops:/pnfs/gridka.de/dteam
# (one-of?true|false)webdav.authz.readonly = false
# (one-of?NONE|READONLY|FULL)webdav.authz.anonymous-operations=NONE
webdav.authz.anonymous-operations=READONLY
# (one-of?true|false)webdav.authz.anonymous-listing = true
# (one-of?http|https|https-jglobus)webdav.authn.protocol = http
webdav.authn.protocol=https-jglobus
# (one-of?true|false)webdav.authn.accept-client-cert = true
# (one-of?true|false)webdav.authn.require-client-cert = false
webdav.authn.require-client-cert=true
# (one-of?true|false)webdav.authn.basic = false
# webdav.authn.hostcert.cert=${dcache.authn.hostcert.cert}
# webdav.authn.hostcert.key=${dcache.authn.hostcert.key}
# webdav.authn.hostcert.refresh=${dcache.authn.hostcert.refresh}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.authn.hostcert.refresh.unit})webdav.authn.hostcert.refresh.unit=${dcache.authn.hostcert.refresh.unit}
# webdav.authn.capath=${dcache.authn.capath}
# webdav.authn.capath.refresh=${dcache.authn.capath.refresh}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.authn.capath.refresh.unit})webdav.authn.capath.refresh.unit=${dcache.authn.capath.refresh.unit}
# webdav.limits.acceptors=1
# webdav.limits.idle-time=300
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
# webdav.limits.idle-time.unit=SECONDS
# webdav.limits.low-resource-idle-time=30
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
# webdav.limits.low-resource-idle-time.unit=SECONDS
# webdav.limits.backlog=1024
# webdav.limits.threads.max=500
# webdav.limits.threads.min=1
# webdav.limits.threads.idle-time=60
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
# webdav.limits.threads.idle-time.unit=SECONDS
# webdav.limits.queue-length=500
# webdav.limits.graceful-shutdown=2
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
# webdav.limits.graceful-shutdown.unit=SECONDS
# (prefix)webdav.templates.config = The set of values accessible from within the ST template
# (prefix)webdav.custom-response-header = HTTP headers that are always included in dCache responses
# webdav.custom-response-header!Server = dCache/${dcache.version}
# webdav.templates.config!head_title = dCache File System
# webdav.templates.config!header_brand = dCache
# webdav.templates.config!header_text = ${dcache.description}
# webdav.templates.config!footer = Powered by <a href="http://www.dcache.org/">dCache</a>
# webdav.static-content.location=/.webdav
# webdav.static-content.dir.default=${dcache.paths.share}/webdav/static
# webdav.static-content.dir.local=/var/lib/dcache/webdav/local
# webdav.static-content.uri=${webdav.static-content.location}
# webdav.templates.html=file:${dcache.paths.share}/webdav/templates/html.stg
# webdav.authn.ciphers = ${dcache.authn.ciphers}

#
# -- xrootd-alice-token.properties --
#
# xrootdAuthzKeystore=${dcache.paths.etc}/keystore


#
# -- xrootd-gsi.properties --
#
# xrootd.gsi.hostcert.key=${dcache.authn.hostcert.key}
# xrootd.gsi.hostcert.cert=${dcache.authn.hostcert.cert}
# xrootd.gsi.hostcert.refresh=${dcache.authn.hostcert.refresh}
# xrootd.gsi.hostcert.refresh.unit=${dcache.authn.hostcert.refresh.unit}
# xrootd.gsi.hostcert.verify=${dcache.authn.hostcert.verify}
# xrootd.gsi.ca.path=${dcache.authn.capath}
# xrootd.gsi.ca.refresh=${dcache.authn.capath.refresh}
# xrootd.gsi.ca.refresh.unit=${dcache.authn.capath.refresh.unit}


#
# -- xrootd.properties --
#
# xrootd.cell.name=Xrootd-${host.name}
# (one-of?true|false)xrootd.cell.export=true
# xrootd.cell.subscribe=${xrootd.loginbroker.request-topic}
# xrootd.net.port = 1094
# xrootd.net.listen = ${dcache.net.listen}
# xrootd.net.backlog = 1024
# xrootd.limits.threads = 1000
# (one-of?true|false|${dcache.enable.space-reservation})xrootd.enable.space-reservation=${dcache.enable.space-reservation}
# xrootd.service.poolmanager=${xrootd.service.poolmanager-space-${xrootd.enable.space-reservation}}
# xrootd.service.poolmanager.timeout = 5400000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)xrootd.service.poolmanager.timeout.unit=MILLISECONDS
# xrootd.service.pnfsmanager=${dcache.service.pnfsmanager}
# xrootd.service.gplazma=${dcache.service.gplazma}
# xrootd.service.gplazma.timeout=30
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)xrootd.service.gplazma.timeout.unit=SECONDS
# xrootd.service.billing=${dcache.service.billing}
# xrootd.service.pool.timeout = 15000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)xrootd.service.pool.timeout.unit=MILLISECONDS
# xrootd.loginbroker.update-topic=${dcache.loginbroker.update-topic}
# xrootd.loginbroker.request-topic=${dcache.loginbroker.request-topic}
# xrootd.loginbroker.tags=${dcache.loginbroker.tags}
# xrootd.loginbroker.update-period=${dcache.loginbroker.update-period}
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.loginbroker.update-period.unit})\
#   xrootd.loginbroker.update-period.unit=${dcache.loginbroker.update-period.unit}
# xrootd.loginbroker.update-threshold=${dcache.loginbroker.update-threshold}
# xrootd.loginbroker.version=2.4
# xrootd.loginbroker.family=root
# xrootd.root = /
# xrootd.authz.read-paths = /
# xrootd.authz.write-paths =
# xrootd.plugins=gplazma:none,access-log,authz:none
# xrootd.authz.user = nobody
# xrootd.authz.upload-directory=${dcache.upload-directory}
# xrootd.mover.queue =
# xrootd.mover.timeout = 180000
# (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)xrootd.mover.timeout.unit=MILLISECONDS


