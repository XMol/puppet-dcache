###########################################################################
# This is a very simple sample configuration file sufficient to start an  #
# xrootd data server using the default port 1094 and its companion cmsd.  #
# Trying to use the xrootd will cause the client to simply wait because   #
# there is no redirector and this configuration file is insufficient to   #
# start one. Consult the reference manuals on how to create a usable      #
# configuration file to completely describe a functional xrootd cluster.  #
#                                                                         #
# On start-up the xrootd will complain about not connecting to the pipe   #
# named '/var/spool/xrootd/.olb/olbd.admin'. This will continue until the #
# cmsd starts. When the cmsd start is will say ' Waiting for primary      #
# server to login.' Once xrootd is started and connects to the cmsd, the  #
# cmsd will complain 'Unable to connect socket to localhost' because      #
# there is no redirector. However, this shows that xrootd and cmsd have   #
# been correctly installed.                                               #
#                                                                         #
# Note: You should always create a *single* configuration file and use it #
# when starting each daemon that you need to run in the cluster!          #
###########################################################################

setenv CSEC_MECH = ID
setenv LFC_HOST = prod-lfc-atlas-ro.cern.ch
#setenv LD_LIBRARY_PATH = /opt/xrd-lfc/n2n/
setenv LFC_CONRETRY = 0


# SITE name
all.sitename FZK-LCG2

# The export directive indicates which paths are to be exported. While the
# default is '/tmp', we indicate it anyway and add the 'stages attribute
# to allow you to start the frm_xfrd to bring in missing files into '/tmp'.
# Remove this attribute if you don't want to enable this feature.
#
all.export /atlas r/o
all.export /grid/atlas r/o
all.export /pnfs/gridka.de/dteam r/o

# The role directive tells xrootd to run as a data server as part of a
# cluster. The causes the xrootd to try to contact the local cmsd which
# needs to started as part of of initialization. As a side note, a
# redirector would have a manager role.
#
all.role server

# The cmsd running on a data server node needs to know where the redirector
# (i.e. manager) is running. In this generic config we simply say that it
# is on this host to allow initialization to succeed. However, the final
# result is not practically usable.
#
all.manager atlas-xrd-de.cern.ch+ 1098

# The copycmd directive tells the frm_xfrd what to use to copy files into
# an exported path with the 'stage' attribute. Here we just say this will
# be '/bin/cp' to allow the frm_xfrd to actual start to show that it works.
# Here missing files are created in /tmp as zero-length files.
#
#frm.xfr.copycmd /bin/cp /dev/null $PFN

# The adminpath and pidpath variables indicate where the pid and various
# IPC files should be placed
#
all.adminpath /var/run/xrootd
all.pidpath /var/run/xrootd

xrootd.async off

xrootd.redirect atlas-xrd-de.cern.ch:1094 ? /

# name of the dCache xrootd door
#pss.origin atlasxrootd-kit.gridka.de+ 1094
pss.origin f01-060-112-e.gridka.de 1094

# This tells xrootd to behave like a proxy
ofs.osslib /usr/lib64/libXrdPss.so

#oss.namelib /opt/xrd-lfc/n2n/XrdOucName2NameLFC-el5-x86_64.so root="/pnfs/gridka.de/" match="gridka.de" 

#pss.namelib /usr/lib64/XrdOucName2NameLFC.so root=/pnfs/gridka.de/atlas match=atlassrm-fzk.gridka.de lfc_host=prod-lfc-atlas-ro.cern.ch
pss.namelib /usr/lib64/XrdOucName2NameLFC.so root=/pnfs/gridka.de/atlas match=atlassrm-fzk.gridka.de

# disable read caching 
pss.setopt ReadCacheSize 0

# ATLAS central FAX monitoring:
xrootd.monitor all auth flush 30s window 5s rbuff 4k fstat 60 lfn ops xfr 5 dest redir files info user atl-prod05.slac.stanford.edu:9930
xrd.report atl-prod05.slac.stanford.edu:9931 every 60s all -buff -poll sync

# GSI Security Config
xrootd.seclib /usr/lib64/libXrdSec.so
acc.authdb /etc/xrootd/auth_file
acc.authrefresh 60
ofs.authorize

#sec.protparm gsi -vomsfun:/usr/lib64/libXrdSecgsiVOMS.so -vomsfunparms:certfmt=raw|vos=atlas|grps=/atlas
sec.protparm gsi -vomsfun:/usr/lib64/libXrdSecgsiVOMS.so -vomsfunparms:certfmt=raw|grpopt=0|vos=atlas,dteam|grps=/atlas,/dteam|dbg
#sec.protocol /usr/lib64 gsi -d:3 -ca:1 -crl:3 
sec.protocol /usr/lib64 gsi -ca:1 -crl:3 
